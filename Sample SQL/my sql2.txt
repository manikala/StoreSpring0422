db 1









-- USERS
create sequence user_seq start 1 increment 1;

create table users (
                       id int8 not null,
                       username varchar(255),
                       lastname varchar(255),
                       firstname varchar(255),
                       password varchar(255),
                       archive boolean not null,
                       primary key (id)
);
-- BUCKET
create sequence bucket_seq start 1 increment 1;

create table buckets (
                         id int8 not null,
                         totalAmount float8,
                         user_id int8,
                         primary key (id)
);

-- LINK BETWEEN BUCKET AND USER
alter table if exists buckets -- изменим таблицу если будет наличие строк в
    add constraint buckets_fk_user -- добавляем ограничения на
    foreign key (user_id) references users; -- создание связи по внешнему ключу, и контроль на наличие в точности совпадающего по значению

-- CATEGORY
create sequence category_seq start 1 increment 1;

create table categories (
                            id int8 not null,
                            name varchar(255),
                            primary key (id)
);
-- PRODUCTS
create sequence product_seq start 1 increment 1;

create table products (
                          id int8 not null,
                          vendor int8,
                          name varchar(255),
                          price float8,
                          amount int8,
                          primary key (id)
);

-- CATEGORY AND PRODUCT
create table products_categories (
                                     product_id int8 not null,
                                     category_id int8 not null
);

alter table if exists products_categories
    add constraint products_categories_fk_category
    foreign key (category_id) references categories;

alter table if exists products_categories
    add constraint products_categories_fk_product
    foreign key (product_id) references products;

-- PRODUCTS IN BUCKET
create table bucket_products (
                                 bucket_id int8 not null,
                                 product_id int8 not null
);

alter table if exists bucket_products
    add constraint bucket_products_fk_product
    foreign key (product_id) references products;

alter table if exists bucket_products
    add constraint bucket_products_fk_bucket
    foreign key (bucket_id) references buckets;

-- ORDERS
create sequence order_seq start 1 increment 1;

create table orders (
                        id int8 not null,
                        product_id int 8not null,
                        quantity float8,
                        totalAmount float8,
                        user_id int8,
                        primary key (id)
);

alter table if exists orders
    add constraint orders_fk_user
    foreign key (user_id) references users;

alter table if exists orders
    add constraint orders_fk_product
    foreign key (product_id) references products;











db 2








INSERT INTO users (id, archive, username, lastname, firstname, password, bucket_id)
VALUES (1, false, 'manikala', 'valera', 'manikala', 'manikala', null);

ALTER SEQUENCE user_seq RESTART WITH 2;













  thymeleaf:
    check-template: true
    check-template-location: true
    enabled: true
    prefix: classpath:/templates/
    suffix: .html
server:
  port: 5432
    driver-class-name: org.postgresql.Driver


dialect: org.hibernate.dialect.PostgreSQLDialect




package com.store.shoptwo.obj;


import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;
import java.util.List;

@Data // Геттеры сетеры и иколс
@NoArgsConstructor
@AllArgsConstructor
@Builder //DTO
@Entity // Указывает, что данный бин (класс) является сущностью.
@Table(name = "buckets")
public class Bucket {

    private static final String SEQ_NAME = "bucket_seq";

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = SEQ_NAME)
    @SequenceGenerator(name = SEQ_NAME, sequenceName = SEQ_NAME, allocationSize = 1)
    private int id = 0;
    //private String user;
    private double totalAmount = 0;
    //List<Product> products = new ArrayList<>();

    @OneToOne
    @JoinColumn(name = "user_id")
    private User user;

    @ManyToMany
    @JoinTable (name = "buckets_products",
            joinColumns = @JoinColumn(name = "bucket_id"),
            inverseJoinColumns = @JoinColumn (name = "product_id"))
    private List<Product> product;


}


